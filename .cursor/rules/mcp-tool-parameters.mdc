---
description: Define parameters for MCP tool functions
globs:
alwaysApply: false
---
# Type hints in MCP tools

When defining parameters in MCP tools:
- Use only ONE type per parameter (no Union types or | syntax)
- For optional parameters, set default value to None
- DO NOT use `Optional[Type]`
- DO NOT use `Any` type, be specific about the types
- If parameter can be multiple types (like str or int), choose the most appropriate one
- Example:
  ```python
  # Wrong:
  async def my_tool(
      required_param: str | int,
      optional_param: Optional[int] = None
  )

  # Correct:
  async def my_tool(
      required_param: str,  # Use str if parameter can be both string and number
      optional_param: int = None
  )
  ```

# .env file

The .env file is located in the root directory of the project and it's filled out.
You just can't see it because it's hidden by the security policy.

# MCP Tool Parameter Types

When defining and using parameters in MCP tools:

1. Basic Types:
   - Use simple types: str, int, float, bool
   - Values are automatically converted to the correct type
   - Boolean values should be passed as true/false (lowercase)

2. Optional Parameters:
   - Set default value to None for optional parameters
   - DO NOT use Optional[Type] or Union types
   - Omitted optional parameters will be None in the function

3. List Parameters:
   - Define with specific type: List[str], List[int]
   - Pass as JSON arrays: ["item1", "item2"]
   - Simple lists (list) can accept mixed types
   - Lists must be passed as valid JSON arrays

4. Dictionary Parameters:
   - Define with specific types: Dict[str, str], Dict[str, int]
   - Pass as JSON objects: {"key": "value"}
   - Keys must always be strings
   - Values must match the specified type
   - Mixed dictionaries should use Dict[str, Any]

5. Complex Nested Types:
   - Supported: Dict[str, List[int]], List[Dict[str, str]]
   - All nested structures must be valid JSON
   - Keep nesting depth reasonable for clarity
   - Each level must follow its type constraints

6. Default Values:
   - None is the preferred default for optional parameters
   - Can use other default values for simple types
   - Default values must match the parameter type

7. Parameter Validation:
   - Type checking is strict and automatic
   - Invalid types will be rejected
   - JSON must be properly formatted
   - No type coercion between incompatible types

Example:
```python
@mcp.tool()
async def example_function(
    required_str: str,              # Required parameter
    optional_int: int = None,       # Optional with None default
    string_list: List[str] = None,  # Optional list of strings
    config: Dict[str, str] = None   # Optional dictionary
) -> Dict[str, Any]:
    pass
```

Usage:
```python
await example_function(
    required_str="value",
    optional_int=42,
    string_list=["item1", "item2"],
    config={"key": "value"}
)
```
