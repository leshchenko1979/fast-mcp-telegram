---
description: Request ID generation and operation naming patterns
globs: src/tools/*.py,src/server.py
alwaysApply: false
---
# Request ID and Operation Naming Patterns

## Request ID Generation

Always generate request IDs at the start of operations:

```python
from src.utils.error_handling import generate_request_id

# ✅ Correct patterns:
request_id = generate_request_id("send_msg")      # send_msg_1756684982243
request_id = generate_request_id("search")        # search_1756684982243
request_id = generate_request_id("read_msgs")     # read_msgs_1756684982243
request_id = generate_request_id("contact")       # contact_1756684982243
request_id = generate_request_id("mtproto")       # mtproto_1756684982243
```

## Standard Prefixes

Use these consistent prefixes for request IDs:

| Operation Type | Prefix | Example |
|----------------|--------|---------|
| Send Message | `send_msg` | `send_msg_1756684982243` |
| Edit Message | `edit_msg` | `edit_msg_1756684982243` |
| Search Messages | `search` | `search_1756684982243` |
| Read Messages | `read_msgs` | `read_msgs_1756684982243` |
| Search Contacts | `contacts` | `contacts_1756684982243` |
| Get Contact Details | `contact` | `contact_1756684982243` |
| Send to Phone | `send_phone_msg` | `send_phone_msg_1756684982243` |
| MTProto Operations | `mtproto` | `mtproto_1756684982243` |

## Operation Name Constants

Use these exact operation names in error responses:

```python
# ✅ Correct operation names:
operation="search_messages"
operation="send_message"
operation="edit_message"
operation="read_messages"
operation="search_contacts"
operation="get_contact_details"
operation="send_message_to_phone"
operation="invoke_mtproto"
```

## Request ID in Error Responses

Always include request IDs in error responses:

```python
return log_and_build_error(
    request_id=request_id,  # Always include this
    operation="operation_name",
    error_message="...",
    params=params,
    exception=e,
)
```

## Request ID in Success Logging

Include request IDs in success logging:

```python
logger.info(f"[{request_id}] Operation completed successfully")
```

## Request ID Generation Timing

Generate request IDs immediately when operations start:

```python
@mcp.tool()
async def my_tool(param1: str, param2: int = None):
    # ✅ Generate ID at the very beginning
    request_id = generate_request_id("tool_prefix")

    # Log operation start
    logger.info(f"[{request_id}] Starting operation...")

    # Use request_id throughout the operation
    try:
        result = await perform_operation()
        logger.info(f"[{request_id}] Operation successful")
        return result
    except Exception as e:
        return log_and_build_error(
            request_id=request_id,  # Use the same ID
            operation="my_tool",
            error_message=f"Operation failed: {e!s}",
            params={"param1": param1, "param2": param2},
            exception=e,
        )
```

## Request ID Patterns in Server

In server.py, use request IDs for tool call tracking:

```python
@mcp.tool()
async def search_messages(query: str, chat_id: str = None):
    request_id = f"search_{int(time.time())}"  # Server-level generation

    logger.info(f"[{request_id}] Searching messages...")

    # Pass request_id to tool implementation
    result = await search_messages_impl(query, chat_id, request_id=request_id)

    # Use handle_tool_error for consistent processing
    error_response = handle_tool_error(result, "search_messages", request_id, {...})
    if error_response:
        return error_response

    return result
```

## Request ID Anti-Patterns

❌ **Don't do this:**
```python
# Inconsistent prefixes
request_id = generate_request_id("msg_send")  # Wrong: should be "send_msg"

# Missing request IDs in errors
return log_and_build_error(
    operation="tool_name",
    error_message="...",
    # Missing request_id parameter
)

# Inconsistent operation names
operation="SearchMessages"  # Wrong: should be "search_messages"
operation="send-msg"        # Wrong: should be "send_message"

# Generating IDs too late
@mcp.tool()
async def my_tool():
    # Do some work first...
    result = await some_operation()

    # ❌ Too late - generate at the beginning
    request_id = generate_request_id("tool")
```

✅ **Do this:**
```python
@mcp.tool()
async def my_tool(param: str):
    # ✅ Generate immediately at start
    request_id = generate_request_id("tool_prefix")

    logger.info(f"[{request_id}] Starting operation")

    try:
        result = await perform_operation()
        logger.info(f"[{request_id}] Operation successful")
        return result
    except Exception as e:
        return log_and_build_error(
            request_id=request_id,      # ✅ Always include
            operation="tool_operation", # ✅ Consistent naming
            error_message="...",
            params={"param": param},
            exception=e,
        )
```