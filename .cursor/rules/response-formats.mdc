---
description: Standardized response formats for Telegram MCP tools
globs: src/tools/*.py
alwaysApply: false
---
# Response Format Standards

## Success Response Structure

All successful operations return consistent structures:

### Search Results
```python
{
    "messages": [
        {
            "id": 12345,
            "date": "2025-01-01T12:00:00+00:00",
            "chat": {
                "id": 123456789,
                "title": "Chat Name",
                "type": "Channel",
                "username": "chat_username"
            },
            "text": "Message content",
            "link": "https://t.me/chat/12345",
            "sender": {
                "id": 987654321,
                "username": "sender_username"
            }
        }
    ],
    "has_more": false
}
```

### Message Operations
```python
{
    "message_id": 12345,
    "date": "2025-01-01T12:00:00+00:00",
    "chat": {
        "id": 123456789,
        "title": "Chat Name",
        "type": "Channel"
    },
    "text": "Message content",
    "status": "sent",  # "sent" or "edited"
    "sender": {
        "id": 987654321,
        "username": "sender_username"
    }
}
```

### Contact Operations
```python
{
    "chat_id": 123456789,
    "title": "Contact Name",
    "type": "User",
    "username": "contact_username",
    "phone": "+1234567890",
    "match_type": "telegram_search",
    "user_info": {
        # Full user entity details
    }
}
```

### Phone Messaging (Success)
```python
{
    "message_id": 12345,
    "date": "2025-01-01T12:00:00+00:00",
    "chat": {
        "id": 123456789,
        "title": "Contact Name"
    },
    "text": "Message content",
    "status": "sent",
    "sender": {
        "id": 987654321
    },
    "phone_number": "+1234567890",
    "contact_was_new": true,
    "contact_removed": false
}
```

## Error Response Structure

All error responses follow this exact format:

```python
{
    "ok": false,
    "error": "Human-readable error message",
    "request_id": "operation_timestamp",
    "operation": "tool_operation_name",
    "params": {
        // Original parameters passed to the tool
        "param1": "value1",
        "param2": "value2"
    },
    "exception": {
        "type": "ExceptionClass",
        "message": "Detailed exception message"
    },
    "action": "run_setup"  // Optional action to suggest to user (e.g., for session invalidation)
}
```

## List Response Format

For operations that return lists of items:

```python
[
    {
        // Individual item structure
        "id": 12345,
        "field": "value"
    },
    {
        // Error response in list format (for search_contacts, read_messages)
        "ok": false,
        "error": "Error message",
        "request_id": "operation_timestamp",
        "operation": "tool_operation_name"
    }
]
```

## MTProto Response Format

Low-level MTProto operations return:

```python
{
    "ok": true,
    "result": {
        // Sanitized MTProto response data
    }
}
```

## Key Consistency Rules

1. **Always include `ok` field** in responses
2. **Use ISO format dates** with timezone: `"2025-01-01T12:00:00+00:00"`
3. **Include request IDs** in all operations and errors
4. **Maintain consistent field naming** across all tools
5. **Use `status` field** for operation results ("sent", "edited", etc.)
6. **Include `has_more` field** in paginated results
7. **Nest chat/user info** under `chat` and `sender` fields
8. **Include original parameters** in error responses for debugging

## Response Validation

Before returning responses, ensure:
- All required fields are present
- Date fields use consistent ISO format
- IDs are properly typed (int for Telegram IDs)
- Nested objects follow consistent structure
- Error responses include complete context