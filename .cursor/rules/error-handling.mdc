---
description: Error handling patterns and utilities usage
globs: *.py
alwaysApply: false
---
# Error Handling Patterns

## Core Utility: `log_and_build_error()`

Use this function for all error cases:

```python
from src.utils.error_handling import log_and_build_error, generate_request_id

request_id = generate_request_id("tool_name")

try:
    result = await operation()
    return result
except Exception as e:
    return log_and_build_error(
        request_id=request_id,
        operation="tool_name",
        error_message=f"Operation failed: {e!s}",
        params={"param": value},
        exception=e,
    )
```

## Server Error Detection

In `server.py`, detect errors using:

```python
from src.utils.error_handling import handle_tool_error

error_response = handle_tool_error(result, "tool_name", request_id, params)
if error_response:
    return error_response
```

## Anti-Patterns to Avoid

❌ Manual error construction
❌ Raising exceptions in tools
❌ Missing request IDs
❌ Empty results instead of errors

✅ Use `log_and_build_error()` for all errors
✅ Include request IDs and params
✅ Return structured error responses