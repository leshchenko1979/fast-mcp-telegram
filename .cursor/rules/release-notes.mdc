---
description: Generate release notes from git changes
---

# Release Notes Generation

## Process for Creating Release Notes

When creating release notes, follow this systematic approach:

### 1. Identify Changes
- Use `git tag --sort=-version:refname | head -1` to find the latest tag
- **Note**: Typically you'll be preparing release notes before creating the new tag

### 2. Analyze Code Changes
- **Primary focus**: `git diff <previous-tag>..HEAD` - Examine actual code changes, not summaries
- **Final state**: `git show HEAD:<file>` - Shows final state of specific files
- **Ignore commit messages**: Focus on what the code actually does, not what commit messages claim
- **Describe final state**: Not the journey, but the end result

### 3. Categorize Changes
- **AI-driven categorization**: Let the AI analyze code changes and determine appropriate categories
- **Focus on impact**: Group changes by their functional impact

### 4. Format Release Notes

Use this markdown template:

```markdown
Release v<version> - <main theme>

## <Category Name>
- **Brief description** - Detailed explanation of what was changed and why
- **Another change** - Impact and benefits

## <Another Category Name>
- **Additional changes** - Description of changes in this category

## Files Changed
- X files modified with Y additions and Z deletions
- Key files updated: list major files
- Infrastructure changes: describe any significant structural or architectural modifications

This release focuses on <main theme>.

**Full Changelog**: https://github.com/leshchenko1979/fast-mcp-telegram/compare/<previous-tag>...<current-tag>

**Note**: Replace `<current-tag>` with the new version tag once created
```

### 5. Quality Checks
- Verify all significant changes are mentioned
- Ensure categories accurately reflect the nature of changes made
- **Validate against code**: Ensure release note descriptions accurately reflect the actual code changes
- **Final state verification**: Confirm descriptions match the final state, not intermediate commits

### 6. Best Practices
- **No emojis** in release notes
- **Focus on impact** rather than implementation details
- **Code-first analysis**: Base descriptions on actual code changes, not commit messages
- **Final state focus**: Describe what the code does now, not the journey to get there
- **Use markdown output block**: So that the user can copy and paste easily

### 7. Version Bump Process
- **First**: Update version in [pyproject.toml](mdc:pyproject.toml)
- **Then**: Create git tag: `git tag v<version>`
- **Next**: Push tag: `git push origin v<version>`
- **Then**: Create GitHub release with generated notes
- **Wait for confirmation**: Do not proceed until user confirms GitHub release is published
- **Finally**: Send community announcement to Telegram group (only after user confirmation)

**Typical workflow**: Analyze changes → Prepare release notes → Quality checks → Update version → Create tag → Push → Create GitHub release → **Wait for user confirmation** → Send community message

### 8. Community Announcement Process
- **Prerequisite**: Only proceed after user confirms GitHub release is published
- **Target**: Send message to `@mcp_telegram` community group
- **Language**: Russian (primary community language)
- **Content**: Include version number, key features, and installation instructions
- **Format**: Use Markdown formatting with emojis for better readability
- **Structure**:
  - Version header with date
  - Categorized feature highlights with checkmarks
  - Installation commands (PyPI and Docker)
  - GitHub link
- **Timing**: Send only after user confirms GitHub release is published
- **Customization**: Adapt categories and features based on the specific release content
- **Key elements to include**:
  - Version number and release date
  - Major new features and improvements
  - Bug fixes and technical enhancements
  - Installation/update instructions
  - Link to GitHub repository